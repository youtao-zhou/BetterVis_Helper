[["index.html", "An Introduction to BetterVis Chapter 1 An Introduction to BetterVis 1.1 Prerequisites 1.2 How to Use This Guide 1.3 The Core Philosophy of BetterVis", " An Introduction to BetterVis Your Name 2025-08-01 Chapter 1 An Introduction to BetterVis BetterVis is designed to create beautiful graphics with elegant and concise code. It is especially suitable for medical researchers, helping to reduce the inefficient time they spend on plot beautification and to achieve publication-ready graphics for mainstream journals in the shortest possible time. Before using BetterVis, you should be aware of the following information. 1.1 Prerequisites You are a current or former R user, comfortable working in an editor like RStudio or VS Code. You have used ggplot2 to create plots before. Even if you aren’t an expert, you understand its basic syntax and grammar. 1.2 How to Use This Guide This guide covers the functions and their corresponding examples, showcasing the results of advanced visualizations on the sample data included in the BetterVis package. Each chapter represents a fundamental plot type, such as boxplots, bar charts, etc., and provides a detailed explanation of its functions and the meaning of their parameters. If you are looking for a specific type of graphic, you don’t need to read the entire guide. Using your browser’s search function (Ctrl+F) is a great way to quickly locate the section you need. 1.3 The Core Philosophy of BetterVis Our authors have encapsulated the complex process of creating beautiful graphics into functions, exposing the necessary parameters for users to make adjustments. You can use a simplified function call for quick plotting, or alternatively, use more detailed parameters for fine-tuned control. In either case, it retains the advantage of producing advanced visualizations in a short amount of time. The brief example below will help you understand this better. 1.3.1 Simple Example # 模拟数据以运行示例 # Mock data to run the example phenotype_data &lt;- data.frame( stage = sample(c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;), 100, replace = TRUE), age = rnorm(100, 50, 10), gender = sample(c(&quot;Male&quot;, &quot;Female&quot;), 100, replace = TRUE), CA125 = rnorm(100, 30, 10), CEA = rnorm(100, 5, 2), CA15.3 = rnorm(100, 25, 8) ) expression_data &lt;- as.data.frame(matrix(rnorm(100 * 50), nrow = 50, ncol = 100)) colnames(expression_data) &lt;- paste0(&quot;Sample&quot;, 1:100) rownames(expression_data) &lt;- paste0(&quot;Gene&quot;, 1:50) # 这是一个假设的函数调用，因为 BetterVis_Heatmap_Mantel 并不在您提供的文件中 # This is a hypothetical function call as BetterVis_Heatmap_Mantel was not in the provided files # BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;)) 1.3.2 Advanced Example # 这是一个假设的函数调用 # This is a hypothetical function call # BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;), # significant_symbol = TRUE, # heatmap_color = brewer.pal(11, &quot;PuOr&quot;), # line_size = c(0.5, 1, 2), # line_color = BetterVis_Color(type=&quot;discrete&quot;, odd_or_even=&quot;odd&quot;, n=3, style=&quot;Science&quot;), # phenotype_text_size = 5) + # theme(legend.text = element_text(size=14), legend.title = element_text(size=16)) You can specify various parameters for fine-tuning. However, if you don’t provide them, the function uses default values that have been carefully chosen through extensive testing to be suitable for most common scenarios. "],["colors.html", "Chapter 2 How to choose colors in BetterVis 2.1 Written at the beginning 2.2 Usage example 2.3 Parameter explanation", " Chapter 2 How to choose colors in BetterVis 2.1 Written at the beginning The BetterVis philosophy for color selection is based on simplicity and consistency. This is particularly suitable for researchers who do not want to spend excessive time on color coordination. To use these features, the BetterVis functions must be loaded beforehand (which is done in the index.Rmd setup chunk for this book). In a real session, you would load the package: # library(BetterVis) 2.2 Usage example 2.2.1 Discrete And Unpaired color selection This is for when you have distinct categories that are not related. unpaired_colors &lt;- BetterVis_Color(type = &quot;discrete&quot;, odd_or_even = &quot;even&quot;, n = 10, style = &quot;Science&quot;, option = 1) scales::show_col(unpaired_colors) 2.2.2 Discrete And paired color selection This is useful when you have grouped data, for example, “before” and “after” measurements for several groups. paired_colors &lt;- BetterVis_Color(type = &quot;discrete&quot;, odd_or_even = &quot;even&quot;, n = 6, style = &quot;Science&quot;, option = 2, paired = TRUE, pair_num = 2) scales::show_col(paired_colors) 2.2.3 Continuous color extraction This generates a color gradient, perfect for heatmaps or variables that change along a spectrum. continuous_colors &lt;- BetterVis_Color(type = &quot;continuous&quot;, n = 9, style = &quot;Nature&quot;, option = 1) scales::show_col(continuous_colors) Each of these function calls will return a vector of color hex codes based on your specifications. For example, the unpaired_colors object contains: #&gt; [1] &quot;#377eb8&quot; &quot;#4daf4a&quot; &quot;#984ea3&quot; &quot;#ff7f00&quot; &quot;#ffff33&quot; &quot;#a65628&quot; &quot;#f781bf&quot; #&gt; [8] &quot;#999999&quot; &quot;#e41a1c&quot; &quot;#d7191c&quot; 2.3 Parameter explanation type: The type of color scale. Accepts \"discrete\" for categorical data or \"continuous\" for numerical data. Default: NULL. odd_or_even: Specifies whether the total number of colors to be generated should be odd or even. Accepts \"odd\" or \"even\". Default: NULL. n: A numeric value specifying the total number of colors to retrieve. style: The color theme to use. Available options are \"Science\", \"Nature\", \"Cell\", and \"Lancet\". option: A numeric value (1, 2, or 3) specifying the color scheme variation within the selected style. paired: A logical value (TRUE or FALSE) indicating whether to generate colors for paired/grouped data. If TRUE, colors are repeated in groups (e.g., c(\"#984ea3\", \"#984ea3\", \"#ff7f00\", \"#ff7f00\")). pair_num: If paired = TRUE, this sets the number of items within each color group. For example, if n=6 and pair_num=3, the result would be three instances of the first color followed by three instances of the second. Default: 3. "],["boxplots.html", "Chapter 3 Boxplot 3.1 At the Beginning 3.2 BetterVis_Boxplot_Experiment 3.3 BetterVis_Boxplot_MixViolin", " Chapter 3 Boxplot 3.1 At the Beginning To use these features, the BetterVis functions must be loaded beforehand (which is done in the index.Rmd setup chunk for this book). In a real session, you would load the package: # library(BetterVis) 3.2 BetterVis_Boxplot_Experiment In BetterVis_Boxplot_Experiment, we have streamlined the method for presenting multi-group boxplots and for visualizing significance comparisons across facets, allowing for rapid comparisons between multiple groups. 3.2.1 Data Input The examples below will use a sample dataset. In your own project, you would load it from the package like this: # For this book, the data is created in the code chunk below. # In your own analysis, you would use: # data(&quot;Boxplot_Experiment_example&quot;, package = &quot;BetterVis&quot;) # Create the sample data for demonstration Boxplot_Experiment_example &lt;- data.frame( len = c(rnorm(30, 10, 2), rnorm(30, 20, 3), rnorm(30, 25, 4), rnorm(30, 12, 2), rnorm(30, 22, 3), rnorm(30, 28, 4)), supp = factor(rep(c(&quot;OJ&quot;, &quot;VC&quot;), each = 90)), dose = factor(rep(c(&quot;dose_1&quot;, &quot;dose_2&quot;, &quot;dose_3&quot;), each = 30, times = 2)) ) 3.2.2 Simple Example BetterVis_Boxplot_Experiment( data = Boxplot_Experiment_example, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, use_facet = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), comparison_col = &quot;dose&quot;, comparison = list(c(&quot;dose_1&quot;,&quot;dose_2&quot;),c(&quot;dose_1&quot;,&quot;dose_3&quot;),c(&quot;dose_2&quot;,&quot;dose_3&quot;)), ylim = c(0,40) ) 3.2.3 Advanced Example BetterVis_Boxplot_Experiment( data = Boxplot_Experiment_example, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, use_facet = TRUE, title = &quot;Effect of Supplement and Dose on Length&quot;, x_label_angle = 45, x_label_bold = TRUE, y_label_bold = TRUE, axis_titles = c(&quot;Supplement Type&quot;, &quot;Length&quot;), axis_title_bold = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), jitter = TRUE, jitter_color = c(&quot;black&quot;, &quot;black&quot;, &quot;black&quot;), jitter_width = 0.2, jitter_alpha = 0.5, jitter_size = 2, legend_show = FALSE, legend_title = &quot;&quot;, box_width = 0.6, comparison_col = &quot;dose&quot;, comparison = list(c(&quot;dose_1&quot;,&quot;dose_2&quot;),c(&quot;dose_1&quot;,&quot;dose_3&quot;),c(&quot;dose_2&quot;,&quot;dose_3&quot;)), comparison_method = &quot;wilcox&quot;, box_background = TRUE, background_color = &quot;white&quot;, background_border = TRUE, sig_type = &quot;SYMBOL&quot;, violin = FALSE, ylim = c(0,40) ) 3.2.4 We have modified the iris dataset to create these boxplots # Prepare iris data with a new grouping variable iris_mod &lt;- iris iris_mod$Group &lt;- as.factor(rep(rep(paste0(&quot;Group&quot;, 1:5), each = 10),3)) BetterVis_Boxplot_Experiment( data = iris_mod, x_var = &quot;Group&quot;, y_var = &quot;Petal.Width&quot;, fill_var = &quot;Species&quot;, use_facet = TRUE, title = &quot;Petal Width Across Groups and Species&quot;, x_label_angle = 45, x_label_bold = TRUE, y_label_bold = TRUE, axis_titles = c(&quot;Group&quot;, &quot;Petal Width&quot;), axis_title_bold = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), jitter = TRUE, jitter_color = c(&quot;black&quot;, &quot;black&quot;, &quot;black&quot;), jitter_width = 0.1, jitter_alpha = 0.6, jitter_size = 2, legend_show = TRUE, legend_title = &quot;Species&quot;, box_width = 0.6, comparison_col = &quot;Species&quot;, comparison = list(c(&quot;setosa&quot;, &quot;versicolor&quot;),c(&quot;setosa&quot;, &quot;virginica&quot;),c(&quot;versicolor&quot;, &quot;virginica&quot;)), comparison_method = &quot;wilcox&quot;, box_background = TRUE, background_color = &quot;white&quot;, background_border = TRUE, sig_type = &quot;NUMBER&quot;, violin = FALSE, ylim = c(0,3.5) ) 3.2.5 Parameter explanation for BetterVis_Boxplot_Experiment data: The input dataset. x_var: The grouping variable for the x-axis (should be a factor). y_var: The numerical variable for the y-axis. fill_var: The variable used for the fill color (should be a factor). use_facet: A logical value (TRUE/FALSE) indicating whether to use faceting. Default: FALSE. title: The title of the plot. … (and so on for all other parameters) 3.3 BetterVis_Boxplot_MixViolin 3.3.1 Data Input # Prepare iris data with another grouping variable iris_mix &lt;- iris iris_mix$Group2 &lt;- as.factor(sample(rep(paste0(&quot;Color&quot;, 1:5), 30))) # Define a color palette colors &lt;- c(&quot;#e97257&quot;,&quot;#72c5d9&quot;,&quot;#58ae9a&quot;,&quot;#646e9a&quot;,&quot;#efa78e&quot;,&quot;#f3a9c4&quot;, &quot;#ffbf69&quot;, &quot;#b4d33e&quot;,&quot;#ed7d31&quot;,&quot;#6b83b3&quot;,&quot;#b7d3ff&quot;, &quot;#ff72cc&quot;, &quot;#d4a4ff&quot;) 3.3.2 Simple Example BetterVis_Boxplot_MixViolin( data = iris, x_var = &quot;Species&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1 ) 3.3.3 Advanced Example BetterVis_Boxplot_MixViolin( data = iris, x_var =&quot;Species&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1, title = &quot;Mixed Violin and Boxplot of Sepal Length&quot;, title_size = 20, title_bold = TRUE, xlab = &quot;Species&quot;, ylab = &quot;Sepal Length (cm)&quot;, border = TRUE, panel_background_color = &quot;#f3f6f6&quot;, axis_x_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), axis_y_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), legend_show = FALSE, stat_compare_means = TRUE, compare_symbol = &quot;SYMBOL&quot; ) 3.3.4 Adjusting variables and redrawing the plot BetterVis_Boxplot_MixViolin( data = iris_mix, x_var = &quot;Group2&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1, title = &quot;Distribution by Custom Grouping&quot;, xlab = &quot;Custom Group&quot;, ylab = &quot;Sepal Length (cm)&quot;, border = TRUE, panel_background_color = &quot;#f3f6f6&quot;, axis_x_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), axis_y_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), legend_show = TRUE, legend_title = &quot;Group2&quot;, stat_compare_means = TRUE, compare_symbol = &quot;SYMBOL&quot; ) 3.3.5 Parameter explanation for BetterVis_Boxplot_MixViolin data: The input dataset. x_var: The grouping variable for the x-axis (should be a factor). y_var: The numerical variable for the y-axis. fill_color: A vector of colors for the plot fills. … (and so on for all other parameters) 3.3.6 Important Notes Properly setting ylim is important to ensure that the entire boxplot, including any significance indicators, is fully visible. When using comparison_col and comparison, the comparison list should specify pairs of groups found within the comparison_col variable. This feature is best visualized when use_facet = TRUE. You can further customize elements like fonts, borders, etc., by adding standard ggplot2 theme() or guide() functions to the plot object afterwards. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
