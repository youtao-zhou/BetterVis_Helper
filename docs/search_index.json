[["index.html", "An Introduction to BetterVis Chapter 1 An Introduction to BetterVis 1.1 Prerequisites 1.2 How to Use This Guide 1.3 The Core Philosophy of BetterVis", " An Introduction to BetterVis Your Name 2025-08-01 Chapter 1 An Introduction to BetterVis BetterVis is designed to create beautiful graphics with elegant and concise code. It is especially suitable for medical researchers, helping to reduce the inefficient time they spend on plot beautification and to achieve publication-ready graphics for mainstream journals in the shortest possible time. Before using BetterVis, you should be aware of the following information. 1.1 Prerequisites You are a current or former R user, comfortable working in an editor like RStudio or VS Code. You have used ggplot2 to create plots before. Even if you aren’t an expert, you understand its basic syntax and grammar. 1.2 How to Use This Guide This guide covers the functions and their corresponding examples, showcasing the results of advanced visualizations on the sample data included in the BetterVis package. Each chapter represents a fundamental plot type, such as boxplots, bar charts, etc., and provides a detailed explanation of its functions and the meaning of their parameters. If you are looking for a specific type of graphic, you don’t need to read the entire guide. Using your browser’s search function (Ctrl+F) is a great way to quickly locate the section you need. 1.3 The Core Philosophy of BetterVis Our authors have encapsulated the complex process of creating beautiful graphics into functions, exposing the necessary parameters for users to make adjustments. You can use a simplified function call for quick plotting, or alternatively, use more detailed parameters for fine-tuned control. In either case, it retains the advantage of producing advanced visualizations in a short amount of time. The brief example below will help you understand this better. 1.3.1 Simple Example # 模拟数据以运行示例 # Mock data to run the example phenotype_data &lt;- data.frame( stage = sample(c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;), 100, replace = TRUE), age = rnorm(100, 50, 10), gender = sample(c(&quot;Male&quot;, &quot;Female&quot;), 100, replace = TRUE), CA125 = rnorm(100, 30, 10), CEA = rnorm(100, 5, 2), CA15.3 = rnorm(100, 25, 8) ) expression_data &lt;- as.data.frame(matrix(rnorm(100 * 50), nrow = 50, ncol = 100)) colnames(expression_data) &lt;- paste0(&quot;Sample&quot;, 1:100) rownames(expression_data) &lt;- paste0(&quot;Gene&quot;, 1:50) # 这是一个假设的函数调用，因为 BetterVis_Heatmap_Mantel 并不在您提供的文件中 # This is a hypothetical function call as BetterVis_Heatmap_Mantel was not in the provided files # BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;)) 1.3.2 Advanced Example # 这是一个假设的函数调用 # This is a hypothetical function call # BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;), # significant_symbol = TRUE, # heatmap_color = brewer.pal(11, &quot;PuOr&quot;), # line_size = c(0.5, 1, 2), # line_color = BetterVis_Color(type=&quot;discrete&quot;, odd_or_even=&quot;odd&quot;, n=3, style=&quot;Science&quot;), # phenotype_text_size = 5) + # theme(legend.text = element_text(size=14), legend.title = element_text(size=16)) You can specify various parameters for fine-tuning. However, if you don’t provide them, the function uses default values that have been carefully chosen through extensive testing to be suitable for most common scenarios. "],["colors.html", "Chapter 2 How to choose colors in BetterVis 2.1 Written at the beginning 2.2 Usage example 2.3 Parameter explanation", " Chapter 2 How to choose colors in BetterVis 2.1 Written at the beginning The BetterVis philosophy for color selection is based on simplicity and consistency. This is particularly suitable for researchers who do not want to spend excessive time on color coordination. To use these features, the BetterVis functions must be loaded beforehand (which is done in the index.Rmd setup chunk for this book). In a real session, you would load the package: # library(BetterVis) 2.2 Usage example 2.2.1 Discrete And Unpaired color selection This is for when you have distinct categories that are not related. unpaired_colors &lt;- BetterVis_Color(type = &quot;discrete&quot;, odd_or_even = &quot;even&quot;, n = 10, style = &quot;Science&quot;, option = 1) scales::show_col(unpaired_colors) 2.2.2 Discrete And paired color selection This is useful when you have grouped data, for example, “before” and “after” measurements for several groups. paired_colors &lt;- BetterVis_Color(type = &quot;discrete&quot;, odd_or_even = &quot;even&quot;, n = 6, style = &quot;Science&quot;, option = 2, paired = TRUE, pair_num = 2) scales::show_col(paired_colors) 2.2.3 Continuous color extraction This generates a color gradient, perfect for heatmaps or variables that change along a spectrum. continuous_colors &lt;- BetterVis_Color(type = &quot;continuous&quot;, n = 9, style = &quot;Nature&quot;, option = 1) scales::show_col(continuous_colors) Each of these function calls will return a vector of color hex codes based on your specifications. For example, the unpaired_colors object contains: #&gt; [1] &quot;#377eb8&quot; &quot;#4daf4a&quot; &quot;#984ea3&quot; &quot;#ff7f00&quot; &quot;#ffff33&quot; &quot;#a65628&quot; &quot;#f781bf&quot; #&gt; [8] &quot;#999999&quot; &quot;#e41a1c&quot; &quot;#d7191c&quot; 2.3 Parameter explanation type: The type of color scale. Accepts \"discrete\" for categorical data or \"continuous\" for numerical data. Default: NULL. odd_or_even: Specifies whether the total number of colors to be generated should be odd or even. Accepts \"odd\" or \"even\". Default: NULL. n: A numeric value specifying the total number of colors to retrieve. style: The color theme to use. Available options are \"Science\", \"Nature\", \"Cell\", and \"Lancet\". option: A numeric value (1, 2, or 3) specifying the color scheme variation within the selected style. paired: A logical value (TRUE or FALSE) indicating whether to generate colors for paired/grouped data. If TRUE, colors are repeated in groups (e.g., c(\"#984ea3\", \"#984ea3\", \"#ff7f00\", \"#ff7f00\")). pair_num: If paired = TRUE, this sets the number of items within each color group. For example, if n=6 and pair_num=3, the result would be three instances of the first color followed by three instances of the second. Default: 3. "],["boxplots.html", "Chapter 3 Boxplot 3.1 At the Beginning 3.2 BetterVis_Boxplot_Experiment 3.3 BetterVis_Boxplot_MixViolin", " Chapter 3 Boxplot 3.1 At the Beginning To use these features, the BetterVis functions must be loaded beforehand (which is done in the index.Rmd setup chunk for this book). In a real session, you would load the package: # library(BetterVis) 3.2 BetterVis_Boxplot_Experiment In BetterVis_Boxplot_Experiment, we have streamlined the method for presenting multi-group boxplots and for visualizing significance comparisons across facets, allowing for rapid comparisons between multiple groups. 3.2.1 Data Input The examples below will use a sample dataset. In your own project, you would load it from the package like this: # For this book, the data is created in the code chunk below. # In your own analysis, you would use: # data(&quot;Boxplot_Experiment_example&quot;, package = &quot;BetterVis&quot;) # Create the sample data for demonstration Boxplot_Experiment_example &lt;- data.frame( len = c(rnorm(30, 10, 2), rnorm(30, 20, 3), rnorm(30, 25, 4), rnorm(30, 12, 2), rnorm(30, 22, 3), rnorm(30, 28, 4)), supp = factor(rep(c(&quot;OJ&quot;, &quot;VC&quot;), each = 90)), dose = factor(rep(c(&quot;dose_1&quot;, &quot;dose_2&quot;, &quot;dose_3&quot;), each = 30, times = 2)) ) 3.2.2 Simple Example BetterVis_Boxplot_Experiment( data = Boxplot_Experiment_example, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, use_facet = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), comparison_col = &quot;dose&quot;, comparison = list(c(&quot;dose_1&quot;,&quot;dose_2&quot;),c(&quot;dose_1&quot;,&quot;dose_3&quot;),c(&quot;dose_2&quot;,&quot;dose_3&quot;)), ylim = c(0,40) ) 3.2.3 Advanced Example BetterVis_Boxplot_Experiment( data = Boxplot_Experiment_example, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, use_facet = TRUE, title = &quot;Effect of Supplement and Dose on Length&quot;, x_label_angle = 45, x_label_bold = TRUE, y_label_bold = TRUE, axis_titles = c(&quot;Supplement Type&quot;, &quot;Length&quot;), axis_title_bold = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), jitter = TRUE, jitter_color = c(&quot;black&quot;, &quot;black&quot;, &quot;black&quot;), jitter_width = 0.2, jitter_alpha = 0.5, jitter_size = 2, legend_show = FALSE, legend_title = &quot;&quot;, box_width = 0.6, comparison_col = &quot;dose&quot;, comparison = list(c(&quot;dose_1&quot;,&quot;dose_2&quot;),c(&quot;dose_1&quot;,&quot;dose_3&quot;),c(&quot;dose_2&quot;,&quot;dose_3&quot;)), comparison_method = &quot;wilcox&quot;, box_background = TRUE, background_color = &quot;white&quot;, background_border = TRUE, sig_type = &quot;SYMBOL&quot;, violin = FALSE, ylim = c(0,40) ) 3.2.4 We have modified the iris dataset to create these boxplots # Prepare iris data with a new grouping variable iris_mod &lt;- iris iris_mod$Group &lt;- as.factor(rep(rep(paste0(&quot;Group&quot;, 1:5), each = 10),3)) BetterVis_Boxplot_Experiment( data = iris_mod, x_var = &quot;Group&quot;, y_var = &quot;Petal.Width&quot;, fill_var = &quot;Species&quot;, use_facet = TRUE, title = &quot;Petal Width Across Groups and Species&quot;, x_label_angle = 45, x_label_bold = TRUE, y_label_bold = TRUE, axis_titles = c(&quot;Group&quot;, &quot;Petal Width&quot;), axis_title_bold = TRUE, custom_colors = c(&quot;#FC5D5C&quot;, &quot;#4B6A9D&quot;, &quot;#167D7D&quot;), jitter = TRUE, jitter_color = c(&quot;black&quot;, &quot;black&quot;, &quot;black&quot;), jitter_width = 0.1, jitter_alpha = 0.6, jitter_size = 2, legend_show = TRUE, legend_title = &quot;Species&quot;, box_width = 0.6, comparison_col = &quot;Species&quot;, comparison = list(c(&quot;setosa&quot;, &quot;versicolor&quot;),c(&quot;setosa&quot;, &quot;virginica&quot;),c(&quot;versicolor&quot;, &quot;virginica&quot;)), comparison_method = &quot;wilcox&quot;, box_background = TRUE, background_color = &quot;white&quot;, background_border = TRUE, sig_type = &quot;NUMBER&quot;, violin = FALSE, ylim = c(0,3.5) ) 3.2.5 Parameter explanation for BetterVis_Boxplot_Experiment data: The input dataset. x_var: The grouping variable for the x-axis (should be a factor). y_var: The numerical variable for the y-axis. fill_var: The variable used for the fill color (should be a factor). use_facet: A logical value (TRUE/FALSE) indicating whether to use faceting. Default: FALSE. title: The title of the plot. … (and so on for all other parameters) 3.3 BetterVis_Boxplot_MixViolin 3.3.1 Data Input # Prepare iris data with another grouping variable iris_mix &lt;- iris iris_mix$Group2 &lt;- as.factor(sample(rep(paste0(&quot;Color&quot;, 1:5), 30))) # Define a color palette colors &lt;- c(&quot;#e97257&quot;,&quot;#72c5d9&quot;,&quot;#58ae9a&quot;,&quot;#646e9a&quot;,&quot;#efa78e&quot;,&quot;#f3a9c4&quot;, &quot;#ffbf69&quot;, &quot;#b4d33e&quot;,&quot;#ed7d31&quot;,&quot;#6b83b3&quot;,&quot;#b7d3ff&quot;, &quot;#ff72cc&quot;, &quot;#d4a4ff&quot;) 3.3.2 Simple Example BetterVis_Boxplot_MixViolin( data = iris, x_var = &quot;Species&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1 ) 3.3.3 Advanced Example BetterVis_Boxplot_MixViolin( data = iris, x_var =&quot;Species&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1, title = &quot;Mixed Violin and Boxplot of Sepal Length&quot;, title_size = 20, title_bold = TRUE, xlab = &quot;Species&quot;, ylab = &quot;Sepal Length (cm)&quot;, border = TRUE, panel_background_color = &quot;#f3f6f6&quot;, axis_x_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), axis_y_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), legend_show = FALSE, stat_compare_means = TRUE, compare_symbol = &quot;SYMBOL&quot; ) 3.3.4 Adjusting variables and redrawing the plot BetterVis_Boxplot_MixViolin( data = iris_mix, x_var = &quot;Group2&quot;, y_var = &quot;Sepal.Length&quot;, fill_color = colors, y_max_adjust = 2, y_min_adjust = 1, title = &quot;Distribution by Custom Grouping&quot;, xlab = &quot;Custom Group&quot;, ylab = &quot;Sepal Length (cm)&quot;, border = TRUE, panel_background_color = &quot;#f3f6f6&quot;, axis_x_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), axis_y_title = element_text(size = 18, color = &quot;#b35959&quot;, face = &quot;bold&quot;), legend_show = TRUE, legend_title = &quot;Group2&quot;, stat_compare_means = TRUE, compare_symbol = &quot;SYMBOL&quot; ) 3.3.5 Parameter explanation for BetterVis_Boxplot_MixViolin data: The input dataset. x_var: The grouping variable for the x-axis (should be a factor). y_var: The numerical variable for the y-axis. fill_color: A vector of colors for the plot fills. … (and so on for all other parameters) 3.3.6 Important Notes Properly setting ylim is important to ensure that the entire boxplot, including any significance indicators, is fully visible. When using comparison_col and comparison, the comparison list should specify pairs of groups found within the comparison_col variable. This feature is best visualized when use_facet = TRUE. You can further customize elements like fonts, borders, etc., by adding standard ggplot2 theme() or guide() functions to the plot object afterwards. "],["barplots.html", "Chapter 4 Barplot 4.1 BetterVis_Barplot_Accumulative 4.2 BetterVis_Barplot_Bidirectional 4.3 BetterVis_Barplot_Circle 4.4 BetterVis_Barplot_Experiment 4.5 BetterVis_Barplot_Horizontal 4.6 BetterVis_Barplot_Horizontal2", " Chapter 4 Barplot 4.0.1 At the Beginning To use these features, the BetterVis functions must be loaded beforehand. In a real session, you would load the package and any other necessary libraries. # library(BetterVis) library(grid) library(plyr) 4.1 BetterVis_Barplot_Accumulative The BetterVis_Barplot_Accumulative function allows you to display two stacked bar plots simultaneously, though you also have the option to show each one individually. 4.1.1 Data Input # Create sample data for demonstration # In your project, you would load this using: data(&quot;BetterVis_Barplot_Accumulative_example&quot;, package = &quot;BetterVis&quot;) df_accum &lt;- data.frame( Patient = rep(paste0(&quot;P&quot;, c(&quot;08&quot;, &quot;21&quot;, &quot;48&quot;, &quot;53&quot;, &quot;54&quot;)), each = 9), celltype = factor(rep(c(&quot;Plasmacytoid DCs&quot;, &quot;B cells&quot;, &quot;Treg cells&quot;, &quot;Plasma cells&quot;, &quot;Monocytes&quot;, &quot;Endothelial cells&quot;, &quot;Cancer cells&quot;, &quot;Fibroblasts&quot;, &quot;Columner epithelial cells&quot;), 5)), cell_num = floor(runif(45, 100, 2000)) ) df_accum &lt;- ddply(df_accum, &#39;celltype&#39;, transform, percent = cell_num / sum(cell_num)) df_accum$celltype &lt;- factor(df_accum$celltype, levels = rev(unique(df_accum$celltype))) df_accum$Patient &lt;- factor(df_accum$Patient, levels = c(&quot;P21&quot;,&quot;P48&quot;,&quot;P53&quot;,&quot;P54&quot;,&quot;P08&quot;)) barplot_color = c(&quot;#ABDDDE&quot;, &quot;#FAD510&quot;, &quot;#C6CDF7&quot;, &quot;#F4B5BD&quot;, &quot;#FAEED1&quot;,&quot;#0A9F9D&quot;, &quot;#005295&quot;, &quot;#E6A0C4&quot;,&quot;#C52E19&quot;,&quot;orange&quot;) 4.1.2 Simple Example BetterVis_Barplot_Accumulative( data = df_accum, x_var = &quot;celltype&quot;, y1_var = &quot;cell_num&quot;, y2_var = &quot;percent&quot;, fill_var = &quot;Patient&quot;, display = 3, barplot_color = barplot_color, ylim1 = c(0, 15000), ylim2 = c(0, 1), coord_flip = TRUE ) 4.1.3 Advanced Example BetterVis_Barplot_Accumulative( data = df_accum, x_var = &quot;celltype&quot;, y1_var = &quot;cell_num&quot;, y2_var = &quot;percent&quot;, fill_var = &quot;Patient&quot;, display = 3, barplot_color = barplot_color, ylim1 = c(0, 15000), ylim2 = c(0, 1), axis_titles_x = &quot;Cell Types&quot;, x_label_angle = 0, x_label_bold = TRUE, axis_title_x_size = 14, axis_titles_y1 = &quot;Cell Count&quot;, axis_titles_y2 = &quot;Sample Ratio&quot;, y1_label_bold = TRUE, y2_label_bold = TRUE, axis_title_y1_size = 14, axis_title_y2_size = 14, title1 = &quot;Cell Number Distribution&quot;, title2 = &quot;Sample Ratio Distribution&quot;, title_size = 10, title_bold = TRUE, legend_show = TRUE, legend_title = &quot;Legend&quot;, legend_size = 14, legend_position = &quot;bottom&quot;, background_color = &quot;white&quot;, coord_flip = TRUE, grid_ncol = 2, grid_layout = rbind(c(1, 1, 1, 1, 1, 2, 2), c(1, 1, 1, 1, 1, 2, 2)) ) 4.1.4 Parameter explanation for BetterVis_Barplot_Accumulative (Full parameter list as you provided)… 4.2 BetterVis_Barplot_Bidirectional Sometimes, a back-to-back bar chart is needed to display contrasting information, such as when comparing a treatment group against a control group. 4.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Barplot_Bidirectional_example&quot;, package = &quot;BetterVis&quot;) df_bidirect &lt;- data.frame( pathway = rep(c(&quot;Pathway A&quot;, &quot;Pathway B&quot;, &quot;Pathway C&quot;, &quot;Pathway D&quot;, &quot;Pathway E&quot;), each=2), Species = factor(paste(&quot;Species&quot;, 1:10)), Percentage = c(10, -12, 8, -5, 15, -10, 5, -8, 12, -15) ) 4.2.2 Simple Example BetterVis_Barplot_Bidirectional( data = df_bidirect, x_var = &quot;Percentage&quot;, y_var = &quot;pathway&quot;, fill_var = &quot;Species&quot;, barplot_color = barplot_color, title = &quot;Species Contribution to Pathways&quot;, legend_title = &quot;Species Contribution&quot;, arrow = FALSE ) 4.2.3 Advanced Example BetterVis_Barplot_Bidirectional( data = df_bidirect, x_var = &quot;Percentage&quot;, y_var = &quot;pathway&quot;, fill_var = &quot;Species&quot;, barplot_color = barplot_color, axis_titles_x = &quot;&quot;, x_label_angle = 0, x_label_bold = TRUE, axis_title_x_size = 14, axis_titles_y = &quot;&quot;, y_label_bold = TRUE, y_label_angle = 0, axis_title_y_size = 14, title = &quot;Species Contribution to Pathways&quot;, title_size = 16, title_bold = TRUE, legend_show = TRUE, legend_title = &quot;Species Contribution&quot;, legend_size = 10, background_color = &quot;white&quot;, plot_margin = unit(c(2,0.3,0.3,0.3), unit=&quot;cm&quot;), arrow = TRUE, arrow_x1 = c(0.35, 0.2), arrow_x2 = c(0.48, 0.63), arrow_y1 = c(0.88, 0.88), arrow_y2 = c(0.88, 0.88), arrow_col = &quot;black&quot;, arrow_size = 0.5, arrow_text = c(&quot;Enriched in Group A&quot;,&quot;Enriched in Group B&quot;), arrow_text_size = 12, arrow_text_adjust = 0.03, right_text = TRUE, right_text1 = &quot;n = 154 for Group B&quot;, right_text2 = &quot;n = 192 for Group A&quot;, right_text_hjust = 1.2, right_text_vjust = -3.5, right_text_size = 4 ) 4.2.4 Parameter explanation for BetterVis_Barplot_Bidirectional (Full parameter list as you provided)… 4.3 BetterVis_Barplot_Circle When a category contains a large number of individual items, consider using a circular bar plot for visualization. 4.3.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Barplot_Circle_example&quot;, package =&quot;BetterVis&quot;) df_circle &lt;- data.frame( id = 1:60, geneSymbol = paste0(&quot;Gene&quot;, 1:60), med_LFC = c(rnorm(20, 2, 1), rnorm(20, -1.5, 0.8), rnorm(20, 0.5, 0.5)), type = rep(c(&quot;Upregulated&quot;, &quot;Downregulated&quot;, &quot;Neutral&quot;), each = 20) ) barplot_color_circle = c(&quot;#C6CDF7&quot;, &quot;#FAD510&quot;, &quot;#ABDDDE&quot;) 4.3.2 Simple Example BetterVis_Barplot_Circle( data = df_circle, x_var = &quot;id&quot;, y_var=&quot;med_LFC&quot;, fill_var = &quot;type&quot;, label_var = &quot;geneSymbol&quot;, barplot_color = barplot_color_circle ) 4.3.3 Advanced Example BetterVis_Barplot_Circle( data = df_circle, x_var = &quot;id&quot;, y_var = &quot;med_LFC&quot;, fill_var = &quot;type&quot;, label_var = &quot;geneSymbol&quot;, barplot_color = barplot_color_circle, y_continuous_limit = c(-4, 3), point_shape = 19, point_alpha = 0.7, text_adjust = 0.5, text_size = 2, text_alpha = 0.9, text_bold = TRUE, size_legend = FALSE, fill_legend = TRUE, legend_bold = TRUE, legend_size = 10, legend_title_size = 12, legend_title_bold = TRUE ) 4.3.4 Parameter explanation for BetterVis_Barplot_Circle (Full parameter list as you provided)… 4.4 BetterVis_Barplot_Experiment This function streamlines the presentation of multi-group bar plots with integrated significance comparisons. 4.4.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Barplot_Experiment_example&quot;, package = &quot;BetterVis&quot;) df_barplot_exp &lt;- data.frame( len = c(rnorm(30, 10, 2), rnorm(30, 20, 3), rnorm(30, 25, 4), rnorm(30, 12, 2), rnorm(30, 22, 3), rnorm(30, 28, 4)), supp = factor(rep(c(&quot;OJ&quot;, &quot;VC&quot;), each = 90)), dose = factor(rep(c(&quot;dose_1&quot;, &quot;dose_2&quot;, &quot;dose_3&quot;), each = 30, times = 2)) ) 4.4.2 Simple Example BetterVis_Barplot_Experiment( data = df_barplot_exp, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, comparison_col = &quot;dose&quot;, comparison_method = &quot;t.test&quot;, comparison = list(c(&quot;dose_1&quot;, &quot;dose_2&quot;),c(&quot;dose_1&quot;, &quot;dose_3&quot;),c(&quot;dose_2&quot;, &quot;dose_3&quot;)), barplot_color = c(&quot;#E84A32&quot;, &quot;#4CBCD2&quot;, &quot;#00A18A&quot;), facet = TRUE, ylim = c(0,45) ) 4.4.3 Advanced Example BetterVis_Barplot_Experiment( data = df_barplot_exp, x_var = &quot;supp&quot;, y_var = &quot;len&quot;, fill_var = &quot;dose&quot;, jitter = TRUE, jitter_color = c(&quot;black&quot;,&quot;black&quot;,&quot;black&quot;), jitter_width = 0.2, jitter_alpha = 0.7, jitter_size = 3, legend_show = FALSE, legend_title = &quot;Dose&quot;, comparison_col = &quot;dose&quot;, comparison_method = &quot;t.test&quot;, comparison = list(c(&quot;dose_1&quot;, &quot;dose_2&quot;),c(&quot;dose_1&quot;, &quot;dose_3&quot;),c(&quot;dose_2&quot;, &quot;dose_3&quot;)), barplot_color = c(&quot;#E84A32&quot;, &quot;#4CBCD2&quot;, &quot;#00A18A&quot;), facet = TRUE, facet_title_size = 16, y_label_bold = TRUE, axis_titles_y = &quot;&quot;, x_label_angle = 45, x_label_bold = TRUE, axis_titles_x = c(&quot;&quot;), title = &quot;&quot;, axis_title_bold = TRUE, error_bar_width = 0.5, error_bar_size = 0.5, bar_border = TRUE, bar_border_size = 0.8, background_color = &quot;white&quot;, sig_type = &quot;SYMBOL&quot;, ylim = c(0,45) ) 4.4.4 Parameter explanation for BetterVis_Barplot_Experiment (Full parameter list as you provided)… 4.5 BetterVis_Barplot_Horizontal Horizontal bar charts are frequently used for classic enrichment analyses. 4.5.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Barplot_Horizontal_example&quot;, package=&quot;BetterVis&quot;) df_horizontal &lt;- data.frame( Category = &quot;KEGG&quot;, Description = paste(&quot;KEGG:&quot;, c(&quot;Metabolism of xenobiotics&quot;, &quot;Drug metabolism&quot;, &quot;Steroid hormone biosynthesis&quot;, &quot;Retinol metabolism&quot;, &quot;Linoleic acid metabolism&quot;, &quot;Arachidonic acid metabolism&quot;, &quot;Glycolysis / Gluconeogenesis&quot;, &quot;Citrate cycle (TCA cycle)&quot;, &quot;Pentose phosphate pathway&quot;, &quot;Amino sugar and nucleotide sugar metabolism&quot;)), Count = sample(5:25, 10), Bonferroni = 10^-runif(10, 2, 5), Genes = replicate(10, paste(sample(LETTERS, 5), collapse=&quot;, &quot;)) ) df_horizontal$LogP &lt;- -log10(as.numeric(df_horizontal$Bonferroni)) df_horizontal &lt;- arrange(df_horizontal, Bonferroni) df_horizontal$Description_short &lt;- sub(&quot;.*:&quot;, &quot;&quot;, df_horizontal$Description) df_horizontal$Description_short &lt;- factor(df_horizontal$Description_short, levels = df_horizontal$Description_short[order(df_horizontal$LogP)]) 4.5.2 Simple Example BetterVis_Barplot_Horizontal( data = df_horizontal, x_var = &quot;Description_short&quot;, y_var = &quot;Count&quot;, fill_var = &quot;LogP&quot;, label_y_var = &quot;Description_short&quot;, label_other_var = &quot;Genes&quot;, fill_legend_title = &quot;logP&quot;, fill_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), y_label_out = TRUE, label_other_display = TRUE ) 4.5.3 Advanced Example BetterVis_Barplot_Horizontal( data = df_horizontal, x_var = &quot;Description_short&quot;, y_var = &quot;Count&quot;, fill_var = &quot;LogP&quot;, label_y_var = &quot;Description_short&quot;, label_other_var = &quot;Genes&quot;, bar_width = 0.4, base_size = 20, label_y_start = 0.5, label_y_size = 3.5, label_y_hjust = 0, label_y_vjust = 0.5, label_other_start = 0.5, label_other_size = 3, label_other_hjust = 0, label_other_vjust = 0.5, fill_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), color_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), fill_legend = TRUE, fill_legend_title=&quot;logP&quot;, color_legend = FALSE, color_legend_title = &quot;col_lengend&quot;, legend_title_size = 12, legend_text_size = 10, xlab_text = &quot;Gene Count&quot;, ylab_text = &quot;Pathway&quot;, plot_title = &quot;KEGG Enrichment Analysis&quot;, y_label_out = TRUE, label_other_display = TRUE ) 4.5.4 Parameter explanation for BetterVis_Barplot_Horizontal (Full parameter list as you provided)… 4.6 BetterVis_Barplot_Horizontal2 This function provides another highly aesthetic and effective way to create horizontal bar charts, often used for enrichment analysis. Note: The following examples are included for structure, but are set to eval=FALSE because the source code for BetterVis_Barplot_Horizontal2 was not provided. They will not be run when building the book. 4.6.1 Data Input # This would use the same df_horizontal data from the previous section # df_horizontal$Category2 &lt;- sample(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), 10, replace=TRUE) 4.6.2 Simple Example # Note: eval=FALSE BetterVis_Barplot_Horizontal2( data = df,x_var = &quot;Description&quot;,y_var = &quot;Count&quot;,fill_var = &quot;LogP&quot;,label_y_var = &quot;Description&quot;, label_other_var = &quot;Genes&quot;, fill_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), y_label_out = FALSE, label_other_display = TRUE, Category_Var = &quot;Category2&quot;, category_var_color = c(&quot;#c3e1e6&quot;,&quot;#f3dfb7&quot;,&quot;#dcc6dc&quot;), annot_y_offset = -1, annot_y_width = 0.5 ) 4.6.3 Advanced Example # Note: eval=FALSE BetterVis_Barplot_Horizontal2( data = df,x_var = &quot;Description&quot;,y_var = &quot;Count&quot;,fill_var = &quot;LogP&quot;, label_y_var = &quot;Description&quot;, label_other_var = &quot;Genes&quot;, bar_width = 0.4,base_size = 30, label_y_start = 0.5,label_y_size = 5,label_y_hjust = 0,label_y_vjust = 1, label_other_start = 0.5,label_other_size = 4.5,label_other_hjust = 0,label_other_vjust = 2.4, fill_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), color_gradient = list(low = &quot;#486b98&quot;, mid = &quot;#f5f2b1&quot;, high = &quot;#b93735&quot;, midpoint = 3), fill_legend = TRUE, fill_legend_title=&quot;logp&quot;,color_legend = FALSE,color_legend_title = &quot;col_lengend&quot;, legend_title_size = 16, legend_text_size = 16, xlab_text = &quot; Names&quot;,ylab_text = &quot;Gene Count&quot;, plot_title = &quot;KEGG Enrichment Analysis&quot;, y_label_out = FALSE, label_other_display = TRUE, Category_Var = &quot;Category2&quot;, category_var_color = c(&quot;#c3e1e6&quot;,&quot;#f3dfb7&quot;,&quot;#dcc6dc&quot;), annot_y_offset = -1.5, annot_y_width = 0.8, category_text_display=TRUE, category_text_angle=90 ) 4.6.4 Parameter explanation for BetterVis_Barplot_Horizontal2 (Full parameter list as you provided)… "],["network.html", "Chapter 5 Network Plot 5.1 BetterVis_Network_PPI", " Chapter 5 Network Plot 5.0.1 At the Beginning BetterVis package must be loaded beforehand. # library(BetterVis) 5.1 BetterVis_Network_PPI To address the common need for visualizing gene interactions in medical research, we developed BetterVis_Network_PPI. This function is specifically designed for plotting protein-protein interaction (PPI) networks. 5.1.1 Data Input # 为演示创建样本数据 # In your project, you would load this using: # nodes &lt;- data(&quot;BetterVis_Network_PPI_nodes&quot;, package=&quot;BetterVis&quot;) # edges &lt;- data(&quot;BetterVis_Network_PPI_edges&quot;, package=&quot;BetterVis&quot;) set.seed(123) nodes &lt;- data.frame( name = paste0(&quot;Gene&quot;, 1:20), full = runif(20), within5 = runif(20), after5 = runif(20), early = runif(20), late = runif(20), manual_grp = sample(c(&quot;Group A&quot;, &quot;Group B&quot;, &quot;Group C&quot;), 20, replace = TRUE) ) edges &lt;- data.frame( from = sample(nodes$name, 40, replace = TRUE), to = sample(nodes$name, 40, replace = TRUE), weight = runif(40, 0.1, 2) ) # 确保没有自环 edges &lt;- subset(edges, from != to) colors &lt;- c(&#39;#CD8280&#39;,&#39;#54D0B4&#39;,&#39;#78C3ED&#39;, &#39;#E69F00&#39;, &#39;#E98FBD&#39;) 5.1.2 Usage Example # 注意：由于未提供函数源代码，此代码块设置为不执行 (eval=FALSE) # NOTE: This chunk is set to not run (eval=FALSE) as the function source was not provided. BetterVis_Network_PPI(nodes_data = nodes, edges_data = edges, fill_vars = c(&quot;full&quot;,&quot;within5&quot;,&quot;after5&quot;,&quot;early&quot;,&quot;late&quot;), fill_color = colors, group_var = &quot;manual_grp&quot;, node_size = c(0.08, 0.25), node_text_size = 4, line_size = c(0.5, 2.5), line_color = &quot;grey65&quot;, niter = 800, display_border = TRUE) 5.1.3 Parameter explanation nodes_data: A data frame containing information for the plot’s nodes, including their categories. edges_data: A data frame containing information for the edges (lines), including connection strength or weight. fill_vars: The name of the column in nodes_data that will be used to determine the fill color of the nodes. fill_color: A vector of colors to use for the node fills. group_var: The name of the column used to group nodes together with a surrounding dashed box. node_size: A numeric vector of length 2 specifying the size range for the nodes. Default: c(0.1, 0.3). node_text_size: A numeric value for the font size of the node labels. Default: 4. line_size: A numeric vector of length 2 specifying the range for the line (edge) thickness. Default: c(0.5, 2.5). line_color: The color of the lines (edges). Default: \"grey65\". niter: A numeric value controlling the layout algorithm’s iterations, which affects node spread. Default: 800. display_border: A logical value (TRUE/FALSE) indicating whether to display the dashed border boxes around the groups defined by group_var. 5.1.4 Important Note The fill_var parameter supports a minimum of 2 and a maximum of 5 distinct categories for color mapping. The group_var parameter is optional. If it is not provided, the dashed border boxes around groups will not be drawn. "],["heatmap.html", "Chapter 6 Heatmap 6.1 BetterVis_Heatmap_Bicontinuous 6.2 BetterVis_Heatmap_Circle 6.3 BetterVis_Heatmap_Common 6.4 BetterVis_Heatmap_Mantel 6.5 BetterVis_Heatmap_Multi", " Chapter 6 Heatmap 6.0.1 At the Beginning To use these features, the BetterVis functions must be loaded beforehand. # library(BetterVis) library(MetBrewer) library(vegan) 6.1 BetterVis_Heatmap_Bicontinuous BetterVis_Heatmap_Bicontinuous is the best choice for creating heatmaps with a diverging color scale, which is perfect for representing continuous data that spans two extremes from a central point. 6.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Heatmap_Bicontinuous_example&quot;, package=&quot;BetterVis&quot;) df_bicontinuous &lt;- expand.grid(ID = 1:10, name = letters[1:10]) df_bicontinuous$value &lt;- rnorm(100) 6.1.2 Simple Example BetterVis_Heatmap_Bicontinuous(data = df_bicontinuous, x_var = &quot;ID&quot;, y_var = &quot;name&quot;, fill_var = &quot;value&quot;, legend_title = &quot;Change&quot;) 6.1.3 Advanced Example BetterVis_Heatmap_Bicontinuous(df_bicontinuous, x_var =&quot;ID&quot;, y_var =&quot;name&quot;, fill_var =&quot;value&quot;, vline_position = 5, hline_position = &quot;e&quot;, vline_color = &quot;black&quot;, hline_color = &quot;black&quot;, hline_linetype = &quot;dashed&quot;, heatmap_color = rev(met.brewer(&quot;Hiroshige&quot;)), legend_break = 1, legend_title = &quot;Change&quot;, legend_position = &quot;bottom&quot;, legend_title_position = &quot;top&quot;) + theme(axis.text = element_text(size = 12)) 6.1.4 Parameter explanation (Full parameter list as you provided)… 6.2 BetterVis_Heatmap_Circle This function enables the visualization of multiple numeric columns as a series of concentric heatmap rings. 6.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Heatmap_Circle_example&quot;, package=&quot;BetterVis&quot;) df_h_circle &lt;- data.frame( id = rep(paste(&quot;Sample&quot;, 1:10), 5), name = rep(paste(&quot;Feature&quot;, 1:5), each = 10), value = rnorm(50, 0, 1) ) 6.2.2 Simple Example BetterVis_Heatmap_Circle(data = df_h_circle, value_var = &quot;value&quot;, classified_text_var = &quot;id&quot;, classified_value_var = &quot;name&quot;) 6.2.3 Advanced Example BetterVis_Heatmap_Circle(data = df_h_circle, value_var = &quot;value&quot;, classified_text_var = &quot;id&quot;, classified_value_var = &quot;name&quot;, heatmap_color = scales::alpha(met.brewer(&quot;Hiroshige&quot;), 1), text_size = 4, barwidth = 9, barheight = 0.5, legend_break = 1, legend_text_size=12, classified_value_var_label_size = 10) 6.2.4 Parameter explanation (Full parameter list as you provided)… 6.3 BetterVis_Heatmap_Common This function is designed for visualizing a simple, purely numerical matrix. 6.3.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Heatmap_Common_example&quot;, package=&quot;BetterVis&quot;) df_h_common &lt;- as.data.frame(matrix(rnorm(100), 10, 10)) colnames(df_h_common) &lt;- paste(&quot;Sample&quot;, 1:10) rownames(df_h_common) &lt;- paste(&quot;Gene&quot;, 1:10) 6.3.2 Simple Example BetterVis_Heatmap_Common(df_h_common, trans = FALSE) 6.3.3 Advanced Example BetterVis_Heatmap_Common(df_h_common, trans = FALSE, heatmap_color = met.brewer(&quot;Hiroshige&quot;), legend_break = 1, legend_position = &quot;top&quot;, legend_title = &quot;&quot;, legend_text_size = 8, legend_text_bold = TRUE, x_text_size = 12, x_text_bold = TRUE, x_text_angle = 90, y_text_size = 12, y_text_bold = TRUE) 6.3.4 Parameter explanation (Full parameter list as you provided)… 6.4 BetterVis_Heatmap_Mantel This function explores the relationship between a numerical expression matrix and a categorical phenotype dataset. 6.4.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Heatmap_Mantel_example1&quot;, package=&quot;BetterVis&quot;) etc. expression_data &lt;- as.data.frame(matrix(rnorm(50 * 30), nrow = 50, ncol = 30)) colnames(expression_data) &lt;- paste0(&quot;Sample&quot;, 1:30) rownames(expression_data) &lt;- paste0(&quot;Gene&quot;, 1:50) phenotype_data &lt;- data.frame( row.names = colnames(expression_data), stage = sample(c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;), 30, replace = TRUE), age = rnorm(30, 60, 10), gender = sample(c(&quot;Male&quot;, &quot;Female&quot;), 30, replace = TRUE), CA125 = rnorm(30, 35, 15), CEA = rnorm(30, 5, 2), CA15.3 = rnorm(30, 30, 10) ) 6.4.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;)) 6.4.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Heatmap_Mantel(phenotype_data, expression_data, spec_select=c(&quot;stage&quot;, &quot;age&quot;, &quot;gender&quot;, &quot;CA125&quot;, &quot;CEA&quot;, &quot;CA15.3&quot;), significant_symbol = TRUE, heatmap_color = brewer.pal(11, &quot;PuOr&quot;), line_size = c(0.5, 1, 2), line_color = c(&quot;#E41A1C&quot;, &quot;#377EB8&quot;, &quot;#4DAF4A&quot;), phenotype_text_size = 4) + theme(legend.text = element_text(size=16), legend.title = element_text(size=18)) 6.4.4 Parameter explanation (Full parameter list as you provided)… 6.5 BetterVis_Heatmap_Multi This function provides a robust solution for annotating heatmaps with multiple categorical variables. 6.5.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Heatmap_Multi_example&quot;, package=&quot;BetterVis&quot;) df_h_multi &lt;- as.data.frame(matrix(rnorm(20 * 15), 20, 15)) colnames(df_h_multi) &lt;- paste(&quot;Gene&quot;, 1:15) df_h_multi$&#39;case.ID&#39; &lt;- paste(&quot;Sample&quot;, 1:20) df_h_multi$&#39;Primary Metastasis&#39; &lt;- sample(c(&quot;Primary&quot;, &quot;Metastasis&quot;), 20, replace = TRUE) df_h_multi$&#39;Consensus classification&#39; &lt;- sample(paste(&quot;Consensus&quot;, 1:5), 20, replace = TRUE) df_h_multi$&#39;UNC classification&#39; &lt;- sample(c(&quot;UNC1&quot;, &quot;UNC2&quot;, &quot;UNC3&quot;), 20, replace = TRUE) color_annotation&lt;-list( c(&quot;#E31A1C&quot;,&quot;#FDBF6F&quot;), c(&quot;#A6CEE3&quot;,&quot;#1F78B4&quot;,&quot;#B2DF8A&quot;,&quot;#33A02C&quot;,&quot;#FB9A99&quot;), c(&quot;#FF7F00&quot;,&quot;#CAB2D6&quot;) ) 6.5.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Heatmap_Multi(df_h_multi, x_var = &quot;case.ID&quot;, number_vars = NULL, annotation_var = c(&quot;Primary Metastasis&quot;,&quot;Consensus classification&quot;,&quot;UNC classification&quot;), color_heatmap = met.brewer(&quot;Cassatt1&quot;), color_annotation = color_annotation) 6.5.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Heatmap_Multi(df_h_multi, x_var = &quot;case.ID&quot;, number_vars = NULL, annotation_var = c(&quot;Primary Metastasis&quot;,&quot;Consensus classification&quot;,&quot;UNC classification&quot;), color_heatmap = met.brewer(&quot;Cassatt1&quot;), color_annotation = color_annotation, legend_heatmap_position = c(1.08,0.7), legend_annotation_position = c(1.22,-4), heatmap_plot_margin = unit(c(0, 2, -20, 0.5), &quot;cm&quot;), heatmap_theme = theme(axis.text.y = element_text(face=&quot;bold&quot;)), annotation_theme =theme(axis.text.y = element_text(face=&quot;bold&quot;), legend.title =element_text(face=&quot;bold&quot;), legend.text =element_text(face=&quot;bold&quot;))) 6.5.4 Parameter explanation (Full parameter list as you provided)… "],["dotplot.html", "Chapter 7 Dotplot 7.1 BetterVis_DotPlot_Heatmap 7.2 BetterVis_Dotplot_Beeswarm 7.3 BetterVis_Dotplot_Mixbar 7.4 BetterVis_Dotplot_Multifacet 7.5 BetterVis_Dotplot_Smoothline 7.6 BetterVis_Dotplot_Ternary", " Chapter 7 Dotplot 7.0.1 At the Beginning # library(BetterVis) library(MetBrewer) library(RColorBrewer) library(MASS) 7.1 BetterVis_DotPlot_Heatmap This function combines a dot plot with elements of a heatmap. 7.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_DotPlot_Heatmap_example&quot;, package=&quot;BetterVis&quot;) df_dot_heatmap &lt;- matrix(rnorm(17 * 13, 1, 0.8), nrow = 17, ncol = 13) rownames(df_dot_heatmap) &lt;- paste(&quot;Gene&quot;, 1:17) colnames(df_dot_heatmap) &lt;- paste(&quot;CellType&quot;, 1:13) row_colors&lt;-c(brewer.pal(9,&quot;Set3&quot;),brewer.pal(8,&quot;Set2&quot;)) col_colors&lt;-c(brewer.pal(8,&quot;Set1&quot;),brewer.pal(5,&quot;Set2&quot;)) 7.1.2 Usage Example # Note: eval=FALSE as the function is not provided in user files BetterVis_DotPlot_Heatmap(df_dot_heatmap, scale = FALSE, col.min=0, col.max = 2, show.noexpr.dots = TRUE, data.colors = c(&quot;#1289B2&quot;,&quot;#FCF6AF&quot;,&quot;#E53849&quot;), dots.size = 3, dots.type = &quot;square root&quot;, inner.border = FALSE, cluster.features=FALSE, cluster.idents = FALSE, idents.kmeans = 1, features.kmeans = 1, row.names.side = &quot;right&quot;, idents.names.size = 10, column.names.side = &quot;top&quot;, column.names.angle=45, features.names.size = 10, right.annotation = FALSE, bottom.annotation = FALSE, top.annotation = TRUE, row_annotation_color = row_colors, col_annotation_color = col_colors, show.data.legend = TRUE, row_annotation_legend = TRUE, row_annotation_legend_title = &quot;Rows&quot;, col_annotation_legend = TRUE, col_annotation_legend_title = &quot;Cols&quot;, zscore.legend = TRUE, zscore.legend.side = &quot;bottom&quot;, legend.title.size = 10, legend.text.size = 10, row.split = c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5), col.split = c(4,4,4,5,3,1,1,1,1,1,2,5,2), keep_rownames_order = TRUE, border_gp_control = FALSE) 7.1.3 Parameter explanation (Full parameter list as you provided)… 7.2 BetterVis_Dotplot_Beeswarm This function provides a convenient way to create beeswarm plots. 7.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Dotplot_Beeswarm_example&quot;, package=&quot;BetterVis&quot;) df_beeswarm &lt;- Cars93[, c(&quot;Type&quot;, &quot;MPG.city&quot;)] 7.2.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Beeswarm(data = df_beeswarm, x_var = &quot;Type&quot;, y_var = &quot;MPG.city&quot;, color = c(&quot;#68d0ce&quot;, &quot;#f4a4c9&quot;, &quot;#4955d0&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;,&quot;firebrick&quot;), ylim =c(10,60), y_break = 10, comparison_col = &quot;Type&quot;, comparison_group = list(c(&quot;Compact&quot;,&quot;Large&quot;),c(&quot;Midsize&quot;,&quot;Large&quot;),c(&quot;Small&quot;,&quot;Van&quot;)), comparison_method = &quot;t.test&quot;) 7.2.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Beeswarm(data = df_beeswarm, x_var = &quot;Type&quot;, y_var = &quot;MPG.city&quot;, color = c(&quot;#68d0ce&quot;, &quot;#f4a4c9&quot;, &quot;#4955d0&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;,&quot;firebrick&quot;), ylim =c(10,60), y_break = 10, point_size = 2, point_alpha = 0.6, median_bar = TRUE, border=TRUE, title = &quot;Title&quot;, x_title = &quot;Type&quot;, y_title = &quot;MPG.city&quot;, sig_symbol = TRUE, sig_type=&quot;SYMBOL&quot;, comparison_col = &quot;Type&quot;, comparison_group = list(c(&quot;Compact&quot;,&quot;Large&quot;),c(&quot;Midsize&quot;,&quot;Large&quot;),c(&quot;Small&quot;,&quot;Van&quot;)), comparison_method = &quot;t.test&quot;) 7.2.4 Parameter explanation (Full parameter list as you provided)… 7.3 BetterVis_Dotplot_Mixbar This function enhances a standard grouped dot plot by adding marginal bar charts. 7.3.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Dotplot_Mixbar_example&quot;, package=&quot;BetterVis&quot;) df_mixbar &lt;- data.frame( bill_length_mm = rnorm(150, 43, 5), bill_depth_mm = rnorm(150, 17, 2), species = rep(c(&quot;Adelie&quot;, &quot;Chinstrap&quot;, &quot;Gentoo&quot;), each=50), body_mass_g = rnorm(150, 4200, 800) ) 7.3.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Mixbar(df = df_mixbar, x_var = &quot;bill_length_mm&quot;, y_var = &quot;bill_depth_mm&quot;, classified_var = &quot;species&quot;, size_var = &quot;body_mass_g&quot;, color = c(&quot;#FBA72A&quot;, &quot;#78B7C5&quot;, &quot;#7294D4&quot;), x_title = &quot;Bill Length&quot;, y_title = &quot;Bill Depth&quot;) 7.3.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Mixbar(df = df_mixbar, x_var = &quot;bill_length_mm&quot;, y_var = &quot;bill_depth_mm&quot;, classified_var = &quot;species&quot;, size_var = &quot;body_mass_g&quot;, color =c(&quot;#FBA72A&quot;, &quot;#78B7C5&quot;, &quot;#7294D4&quot;), point_shape = 16, point_size = 4, error_bar = TRUE, errorbar_width = 0.6, errorbar_size = 1, legend = FALSE, title = &quot;&quot;, x_title = &quot;Bill Length&quot;, y_title = &quot;Bill Depth&quot;, legend_title = &quot;Species&quot;, theme_custom = theme(axis.title.x = element_text(size = 15)), guides_custom=guides(color=&quot;none&quot;,fill=&quot;none&quot;), Mixbar = TRUE) 7.3.4 Parameter explanation (Full parameter list as you provided)… 7.4 BetterVis_Dotplot_Multifacet Streamlines the creation of advanced visualizations for both standard and faceted dot plots. 7.4.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Dotplot_Multifacet_example&quot;, package=&quot;BetterVis&quot;) df_multifacet &lt;- iris 7.4.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Multifacet(df = df_multifacet, classified_var = &quot;Species&quot;, color = c(&quot;#BEBADA&quot;, &quot;#80B1D3&quot;, &quot;#FDB462&quot;), ncol = 4) 7.4.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Multifacet( df = df_multifacet, classified_var = &quot;Species&quot;, color = c(&quot;#BEBADA&quot;, &quot;#80B1D3&quot;, &quot;#FDB462&quot;), ncol = 4, strokeSize = 0.2, pointSize = 3, strokeColor = &#39;gray30&#39;, alpha = 0.6, legend_title = &quot;Species&quot;, legend_title_size = 12, legend_text_size = 12, x_text_angle = 0, x_text_size = 12, x_title_size = 12, y_text_size = 12, y_title_size = 12, theme_custom = theme(axis.text = element_text(face=&quot;bold&quot;)), guides_custom = NULL) 7.4.4 Parameter explanation (Full parameter list as you provided)… 7.5 BetterVis_Dotplot_Smoothline For correlation and regression analyses, a scatter plot with a fitted line is essential. 7.5.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Dotplot_Smoothline_example&quot;, package=&quot;BetterVis&quot;) df_smoothline &lt;- iris 7.5.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Smoothline(data = df_smoothline, x_var = &quot;Sepal.Width&quot;, y_var = &quot;Sepal.Length&quot;, classified_var = &quot;Species&quot;, size_var = &quot;Petal.Length&quot;, color = c(&quot;#FBA72A&quot;, &quot;#78B7C5&quot;, &quot;#7294D4&quot;), cor_position = c(3.8, 8)) 7.5.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Smoothline(data = df_smoothline, x_var = &quot;Sepal.Width&quot;, y_var = &quot;Sepal.Length&quot;, classified_var = &quot;Species&quot;, size_var = &quot;Petal.Length&quot;, color = c(&quot;#BEBADA&quot;, &quot;#80B1D3&quot;, &quot;#FDB462&quot;), point_size = 5, smoothline = TRUE, smoothline_width = 2, smoothline_color = &quot;#FB8072&quot;, cor_test = TRUE, cor_method = &quot;spearman&quot;, cor_color = &quot;black&quot;, cor_position = c(2.2, 8), title = &quot;Title&quot;, x_title = &quot;Sepal.Width &quot;, y_title = &quot;Sepal.Length&quot;, legend = TRUE, legend_title = &quot;Species&quot;, legend_position = &quot;right&quot;, global_size_adjust = 1) 7.5.4 Parameter explanation (Full parameter list as you provided)… 7.6 BetterVis_Dotplot_Ternary The ternary plot is the ideal choice for visualizing the proportional relationship between three variables. 7.6.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Dotplot_Ternary_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) df_ternary &lt;- data.frame( x = runif(50, 0, 1), y = runif(50, 0, 1), z = runif(50, 0, 1), size = runif(50, 1, 10) ) # Normalize to sum to 1 df_ternary &lt;- df_ternary / rowSums(df_ternary[,1:3]) df_ternary$size &lt;- df_ternary$size * 10 7.6.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Ternary(data = df_ternary, x_var = &quot;x&quot;, y_var = &quot;y&quot;, z_var = &quot;z&quot;, size_var = &quot;size&quot;, color = MetBrewer::met.brewer(&quot;Hiroshige&quot;), all_text_adjust = 1.5) 7.6.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Dotplot_Ternary(data = df_ternary, x_var = &quot;x&quot;, y_var = &quot;y&quot;, z_var = &quot;z&quot;, size_var = &quot;size&quot;, color = MetBrewer::met.brewer(&quot;Hiroshige&quot;), point_size = 3, point_alpha = 0.6, border_size = 1.2, border_color = c(&quot;#68d0ce&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;), legend = TRUE, all_text_adjust = 1.3, title = &quot;Title&quot;, subtitle = &quot;Sub_Title&quot;, x_title = &quot;X_Title&quot;, y_title = &quot;Y_Title&quot;, z_title = &quot;Z_Title&quot;) 7.6.4 Parameter explanation (Full parameter list as you provided)… "],["ridgeline.html", "Chapter 8 Ridgeline Plot 8.1 BetterVis_Ridgeline_Single 8.2 BetterVis_Ridgeline_Facet", " Chapter 8 Ridgeline Plot 8.0.1 At the Beginning # library(BetterVis) 8.1 BetterVis_Ridgeline_Single A ridgeline plot is an ideal choice for visualizing and comparing the distribution of a variable across multiple categories. 8.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Ridgeline_Single_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) df_ridge_single &lt;- data.frame( CytoTRACEScore = rnorm(200, 0.5, 0.2), patient = factor(rep(paste(&quot;Patient&quot;, 1:14), length.out = 200)), mutationGroup = factor(sample(c(&quot;Mut A&quot;, &quot;Mut B&quot;, &quot;Mut C&quot;, &quot;WT&quot;), 200, replace = TRUE)) ) sampleColor &lt;- c(&#39;#F6EB5E&#39;,&#39;#CD8280&#39;,&#39;#F0F0F0&#39;, &#39;#54D0B4&#39;, &#39;#D2D1D1&#39;,&#39;#78C3ED&#39;, &#39;#E69F00&#39;, &#39;#CBDFF3&#39;, &#39;#3BFFB8&#39;, &#39;#ECAD67&#39;,&#39;#B3B2B2&#39;, &#39;#959595&#39;, &#39;#E98FBD&#39;,&#39;#2672B2&#39;) 8.1.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Ridgeline_Single( data = df_ridge_single, x_var = &quot;CytoTRACEScore&quot;, y_var = &quot;patient&quot;, color = sampleColor, annotation = TRUE, annotation_var = &quot;mutationGroup&quot;, color_annotation_var = c(&quot;#68d0ce&quot;, &quot;#f4a4c9&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;) ) 8.1.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Ridgeline_Single( data = df_ridge_single, x_var = &quot;CytoTRACEScore&quot;, y_var = &quot;patient&quot;, color = sampleColor, annotation = TRUE, annotation_var = &quot;mutationGroup&quot;, color_annotation_var = c(&quot;#68d0ce&quot;, &quot;#f4a4c9&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;), arrow = TRUE, arrow_x1 = c(0.88, 0.12), arrow_x2 = c(1.12, -0.12), arrow_y1 = c(0.5, 0.5), arrow_y2 = c(0.5, 0.5), arrow_width = 0.6, arrow_text_left = &quot;Left&quot;, arrow_text_middle = &quot;Middle&quot;, arrow_text_right = &quot;Right&quot;, all_text_adjust = 1, combined_width=c(1.5, 0.8) ) 8.1.4 Parameter explanation (Full parameter list as you provided)… 8.2 BetterVis_Ridgeline_Facet A dedicated function specifically for creating faceted versions of ridgeline plots. 8.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Ridgeline_Facet_example&quot;, package=&quot;BetterVis&quot;) set.seed(456) df_ridge_facet &lt;- data.frame( CytoTRACEScore = rnorm(500, 0.5, 0.2), patient = factor(rep(paste(&quot;Patient&quot;, 1:14), length.out = 500)), mutationGroup = factor(sample(c(&quot;Mut A&quot;, &quot;Mut B&quot;, &quot;Mut C&quot;, &quot;WT&quot;), 500, replace = TRUE)), Group = factor(sample(paste(&quot;Group&quot;, 1:6), 500, replace = TRUE)) ) 8.2.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Ridgeline_Facet( data = df_ridge_facet, x_var = &quot;CytoTRACEScore&quot;, y_var = &quot;patient&quot;, facet_var = &quot;Group&quot;, annotation_var = &quot;mutationGroup&quot;, color = sampleColor ) 8.2.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Ridgeline_Facet( data = df_ridge_facet, x_var = &quot;CytoTRACEScore&quot;, y_var = &quot;patient&quot;, facet_var = &quot;Group&quot;, nrow = 2, ncol = 3, color = sampleColor, annotation = TRUE, annotation_var = &quot;mutationGroup&quot;, color_annotation_var = c(&quot;#68d0ce&quot;, &quot;#f4a4c9&quot;, &quot;#4955d0&quot;, &quot;#e09a2a&quot;, &quot;#de6a73&quot;), all_text_adjust = 1.1, combined_width = c(1.5, 0.8) ) 8.2.4 Parameter explanation (Full parameter list as you provided)… "],["sankey.html", "Chapter 9 Sankey Plot 9.1 BetterVis_Sankey_Single", " Chapter 9 Sankey Plot 9.0.1 At the Beginning # library(BetterVis) 9.1 BetterVis_Sankey_Single For visualizing data flow, a Sankey diagram is the ideal choice. 9.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Sankey_Single_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) df_sankey &lt;- data.frame( AgeGroup = sample(c(&quot;18-30&quot;, &quot;31-50&quot;, &quot;51-70&quot;, &quot;&gt;70&quot;), 500, replace = TRUE), Diagnosis = sample(c(&quot;GBM&quot;, &quot;LUAD&quot;, &quot;COAD&quot;), 500, replace = TRUE), Treatment = sample(paste0(&quot;Treatment_&quot;, 1:4), 500, replace = TRUE), Outcome = sample(c(&quot;Cured&quot;, &quot;Improved&quot;, &quot;No_Improvement&quot;, &quot;Deceased&quot;), 500, replace = TRUE) ) sankey_colors&lt;-c(&quot;#F3BDA5&quot;, &quot;#5FC8D1&quot;, &quot;#e377c2&quot;, &quot;#D8B4E2&quot;, &quot;#1f77b4&quot;, &quot;#F9D68D&quot;, &quot;#FDFD96&quot;, &quot;#B7E4C7&quot;, &quot;#7FBEEB&quot;, &quot;#E0E0E0&quot;, &quot;#D8B4E2&quot;, &quot;#AED9E0&quot;,&quot;#68d0ce&quot;,&quot;#e09a2a&quot;,&quot;#de6a73&quot;) 9.1.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Sankey_Single(data = df_sankey, sankey_color = sankey_colors) 9.1.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Sankey_Single(data = df_sankey, sankey_alpha = 0.6, sankey_width = 0.4, border_color = &quot;grey30&quot;, sankey_text_size = 4, sankey_text_hjust = 0.5, sankey_text_vjust = 0.5, bottom_text_size = 18, bottom_text_color = &quot;grey30&quot;, title = &quot;Sankey Plot&quot;, title_size = 18, text_adjust_global = 1, sankey_color = sankey_colors) 9.1.4 Parameter explanation (Full parameter list as you provided)… "],["venn.html", "Chapter 10 Venn and Upset Plots 10.1 BetterVis_Venn_UpsetR", " Chapter 10 Venn and Upset Plots 10.0.1 At the Beginning # library(BetterVis) 10.1 BetterVis_Venn_UpsetR While traditional Venn diagrams are common, they become difficult to read with many sets. UpSet plots are a more powerful method for visualizing multi-set intersections. 10.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Venn_UpsetR_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) listInput &lt;- list( one = sample(1:30, 15), two = sample(1:30, 15), three = sample(1:30, 20), four = sample(1:30, 12), five = sample(1:30, 18) ) 10.1.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Venn_UpsetR(listInput, all_text_adjust = 2) 10.1.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Venn_UpsetR(listInput, ratio = c(0.7,0.3), y.label = &quot;Intersection size&quot;, x.label = &quot;Set Size&quot;, main.bar.color = &quot;#FCB2AF&quot;, sets.bar.color = &quot;#9BDFDF&quot;, matrix.color = &quot;#8C9FCA&quot;, point.size = 3, line.size=1, all_text_adjust = c(1.5, 1.2, 1.5, 1.2, 1.5, 1.5)) 10.1.4 Parameter explanation (Full parameter list as you provided)… "],["circos.html", "Chapter 11 Circos 11.1 BetterVis_Circos_Interaction 11.2 BetterVis_Circos_Ringplot", " Chapter 11 Circos 11.0.1 At the Beginning # library(BetterVis) 11.1 BetterVis_Circos_Interaction Circos plots visualize categorical information and the strength of interactions between variables. 11.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Circos_Interaction_example1&quot;, package=&quot;BetterVis&quot;) etc. set.seed(123) df_sample &lt;- data.frame( ID_Gene = paste(sample(LETTERS, 50, replace = TRUE), sample(1:100, 50, replace = TRUE), sep = &quot;-&quot;), type_main = sample(c(&quot;Type A&quot;, &quot;Type B&quot;, &quot;Type C&quot;), 50, replace = TRUE), type_col1 = sample(c(&quot;C1_X&quot;, &quot;C1_Y&quot;), 50, replace = TRUE), type_col2 = sample(c(&quot;C2_P&quot;, &quot;C2_Q&quot;, &quot;C2_R&quot;), 50, replace = TRUE) ) interaction_data_sample &lt;- data.frame( ID = sample(df_sample$ID_Gene, 30), Gene = sample(df_sample$ID_Gene, 30), Correlation = runif(30, -1, 1), Pvalue = runif(30, 0, 0.1) ) my_main_col_color &lt;- c(&quot;#FBB4AE&quot;, &quot;#B3CDE3&quot;, &quot;#CCEBC5&quot;) my_color1 &lt;- c(&quot;#FED9A6&quot;, &quot;#FFFFCC&quot;) my_color2 &lt;- c(&quot;#DEEBF7&quot;, &quot;#C6DBEF&quot;, &quot;#9ECAE1&quot;) 11.1.2 Usage Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Circos_Interaction( df = df_sample, interaction_data = interaction_data_sample, main_col = &quot;ID_Gene&quot;, main_col_color_classify = &quot;type_main&quot;, col1_name = &quot;type_col1&quot;, col2_name = &quot;type_col2&quot;, main_col_color = my_main_col_color, color1 = my_color1, color2 = my_color2, link_source_col = &quot;ID&quot;, link_target_col = &quot;Gene&quot;, link_value_col = &quot;Correlation&quot;, link_pvalue_col = &quot;Pvalue&quot; , main_col_text = TRUE, col1_text = TRUE, col2_text = TRUE, col3_text = TRUE ) 11.1.3 Parameter explanation (Full parameter list as you provided)… 11.2 BetterVis_Circos_Ringplot 11.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Circos_Ringplot_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) df_ringplot &lt;- data.frame( trait = sample(c(&quot;BMI&quot;, &quot;AF&quot;, &quot;Cough&quot;, &quot;WHRadjbmi&quot;), 315, replace = TRUE), Gene = paste0(&quot;Gene&quot;, sample(1:50, 315, replace = TRUE)), SNP = paste0(&quot;rs&quot;, sample(10000:99999, 315, replace = TRUE)) ) 11.2.2 Usage Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Circos_Ringplot(data = df_ringplot, root = &quot;Cough&quot;, color = NULL) 11.2.3 Parameter explanation (Full parameter list as you provided)… "],["lineplot.html", "Chapter 12 Line Plot 12.1 BetterVis_LinePlot_Chart", " Chapter 12 Line Plot 12.0.1 At the Beginning # library(BetterVis) 12.1 BetterVis_LinePlot_Chart This function addresses the fundamental need for creating both standard and faceted line plots. 12.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_LinePlot_Chart_example&quot;, package=&quot;BetterVis&quot;) set.seed(123) df_line &lt;- expand.grid( Day = 1:10, Treatment = paste(&quot;Treat&quot;, 1:4), Group = c(&quot;G1&quot;, &quot;G2&quot;) ) df_line$value &lt;- ave(rnorm(nrow(df_line)), df_line$Treatment, FUN = function(x) cumsum(x) + rnorm(1, 5)) example_colors &lt;- c( &quot;#4489C8&quot;, &quot;#ED7E7A&quot;,&quot;#008F91&quot;, &quot;#FFCD44&quot;) 12.1.2 Simple Example # Note: eval=FALSE as the function is not provided in user files BetterVis_LinePlot_Chart ( df = df_line, x_var = &quot;Day&quot;, y_var = &quot;value&quot;, fill_var = &quot;Treatment&quot;, colors = example_colors, x_title = &quot;Day&quot;, y_title = &quot;Value&quot;, legend_title = &quot;&quot; ) 12.1.3 Advanced Example # Note: eval=FALSE as the function is not provided in user files BetterVis_LinePlot_Chart ( df = df_line, x_var = &quot;Day&quot;, y_var = &quot;value&quot;, fill_var = &quot;Treatment&quot;, colors = example_colors, confidence = TRUE, x_title = &quot;Day&quot;, y_title = &quot;Value&quot;, legend_title = &quot;&quot;, legend_position = &quot;top&quot;, size_global_adjust = 1, facet = TRUE, facet_var = &quot;Group&quot;, facet_background_color = &quot;grey&quot;, facet_background_border=FALSE ) 12.1.4 Parameter explanation (Full parameter list as you provided)… "],["pie.html", "Chapter 13 Pie Plot 13.1 BetterVis_Pie_Single 13.2 BetterVis_Pie_Multi", " Chapter 13 Pie Plot 13.0.1 At the Beginning # library(BetterVis) 13.1 BetterVis_Pie_Single Draw a good-looking pie chart in the fastest way. 13.1.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Pie_Single_example&quot;, package=&quot;BetterVis&quot;) df_pie_single &lt;- data.frame( Company = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), Share = c(40, 25, 15, 10, 10) ) pie_colors &lt;- c(&quot;#FED439B2&quot;, &quot;#709AE1B2&quot;, &quot;#8A9197B2&quot;, &quot;#D2AF81B2&quot;, &quot;#FD7446B2&quot;) 13.1.2 Usage Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Pie_Single(df = df_pie_single, ID_var = &quot;Company&quot;, Proportion_var = &quot;Share&quot;, colors = pie_colors, label = TRUE, size_adjust = 1) 13.1.3 Parameter explanation (Full parameter list as you provided)… 13.2 BetterVis_Pie_Multi This function is designed to create faceted pie charts, ideal for comparing proportional relationships across groups. 13.2.1 Data Input # Create sample data # In your project: data(&quot;BetterVis_Pie_Multi_example_in&quot;, package=&quot;BetterVis&quot;) etc. set.seed(123) data_in &lt;- data.frame( Habitat = rep(c(&quot;H1&quot;, &quot;H2&quot;), each = 10), type = rep(paste0(&quot;T&quot;, 1:5), 4), Group = rep(c(&quot;G1&quot;, &quot;G2&quot;), each = 10), Phylum = sample(paste0(&quot;P&quot;, 1:8), 20, replace = TRUE), Proportion = runif(20) ) data_in &lt;- ddply(data_in, .(Habitat, Group, type), transform, Proportion = Proportion / sum(Proportion)) data_out &lt;- data.frame( Habitat = rep(c(&quot;H1&quot;, &quot;H2&quot;), each = 2), name = rep(c(&quot;N1&quot;, &quot;N2&quot;), 2), value = c(0.6, 0.4, 0.3, 0.7) ) color1 &lt;- c( &quot;#FED439B2&quot;, &quot;#709AE1B2&quot;,&quot;#8A9197B2&quot;,&quot;#D2AF81B2&quot;, &quot;#FD7446B2&quot;, &quot;#D5E4A2B2&quot;, &quot;#197EC0B2&quot;, &quot;#46732EB2&quot;, &quot;#71D0F5B2&quot;, &quot;#C6CDF7&quot;, &quot;#91331FB2&quot;, &quot;#1A9993B2&quot;, &quot;#FD8CC1B2&quot;, &quot;#FAD510&quot;, &quot;#0A9F9D&quot;, &quot;#3B9AB2&quot;, &quot;#FF0000&quot;, &quot;#969BC7&quot;, &quot;#B695BC&quot;, &quot;#6F9554&quot;) color2&lt;-c(&quot;#FBA72A&quot;,&quot;#969BC7&quot;) 13.2.2 Usage Example # Note: eval=FALSE as the function is not provided in user files BetterVis_Pie_Multi( data_in = data_in, data_out = data_out, facet_var = &quot;Habitat&quot;, x_var = &quot;type&quot;, y_var = &quot;Group&quot;, fill_var1 = &quot;Phylum&quot;, pie_var1 = &quot;Proportion&quot;, fill_var2 = &quot;name&quot;, pie_var2 = &quot;value&quot;, in_color = color1, out_color = color2, draw_outer_pie = TRUE ) 13.2.3 Parameter explanation (Full parameter list as you provided)… "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
